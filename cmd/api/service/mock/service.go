// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mock is a generated GoMock package.
package mock

import (
	entity "go-library-service/cmd/api/entity"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockPostgresRepository is a mock of PostgresRepository interface.
type MockPostgresRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresRepositoryMockRecorder
}

// MockPostgresRepositoryMockRecorder is the mock recorder for MockPostgresRepository.
type MockPostgresRepositoryMockRecorder struct {
	mock *MockPostgresRepository
}

// NewMockPostgresRepository creates a new mock instance.
func NewMockPostgresRepository(ctrl *gomock.Controller) *MockPostgresRepository {
	mock := &MockPostgresRepository{ctrl: ctrl}
	mock.recorder = &MockPostgresRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresRepository) EXPECT() *MockPostgresRepositoryMockRecorder {
	return m.recorder
}

// BorrowBook mocks base method.
func (m *MockPostgresRepository) BorrowBook(history *entity.BorrowHistory) (*entity.BorrowHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BorrowBook", history)
	ret0, _ := ret[0].(*entity.BorrowHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BorrowBook indicates an expected call of BorrowBook.
func (mr *MockPostgresRepositoryMockRecorder) BorrowBook(history interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BorrowBook", reflect.TypeOf((*MockPostgresRepository)(nil).BorrowBook), history)
}

// CreateBook mocks base method.
func (m *MockPostgresRepository) CreateBook(book entity.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", book)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockPostgresRepositoryMockRecorder) CreateBook(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockPostgresRepository)(nil).CreateBook), book)
}

// CreateUser mocks base method.
func (m *MockPostgresRepository) CreateUser(user entity.User) (*uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockPostgresRepositoryMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockPostgresRepository)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockPostgresRepository) DeleteUser(userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockPostgresRepositoryMockRecorder) DeleteUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockPostgresRepository)(nil).DeleteUser), userID)
}

// GetBookByID mocks base method.
func (m *MockPostgresRepository) GetBookByID(bookID uint) (*entity.BookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByID", bookID)
	ret0, _ := ret[0].(*entity.BookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID.
func (mr *MockPostgresRepositoryMockRecorder) GetBookByID(bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*MockPostgresRepository)(nil).GetBookByID), bookID)
}

// GetBorrowHistoryByBookID mocks base method.
func (m *MockPostgresRepository) GetBorrowHistoryByBookID(bookID uint) ([]entity.BorrowHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBorrowHistoryByBookID", bookID)
	ret0, _ := ret[0].([]entity.BorrowHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBorrowHistoryByBookID indicates an expected call of GetBorrowHistoryByBookID.
func (mr *MockPostgresRepositoryMockRecorder) GetBorrowHistoryByBookID(bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBorrowHistoryByBookID", reflect.TypeOf((*MockPostgresRepository)(nil).GetBorrowHistoryByBookID), bookID)
}

// GetBorrowHistoryByID mocks base method.
func (m *MockPostgresRepository) GetBorrowHistoryByID(id uint) (*entity.BorrowHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBorrowHistoryByID", id)
	ret0, _ := ret[0].(*entity.BorrowHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBorrowHistoryByID indicates an expected call of GetBorrowHistoryByID.
func (mr *MockPostgresRepositoryMockRecorder) GetBorrowHistoryByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBorrowHistoryByID", reflect.TypeOf((*MockPostgresRepository)(nil).GetBorrowHistoryByID), id)
}

// GetUserByID mocks base method.
func (m *MockPostgresRepository) GetUserByID(userID uint) (*entity.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(*entity.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockPostgresRepositoryMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockPostgresRepository)(nil).GetUserByID), userID)
}

// GetUserByUsername mocks base method.
func (m *MockPostgresRepository) GetUserByUsername(username string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockPostgresRepositoryMockRecorder) GetUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockPostgresRepository)(nil).GetUserByUsername), username)
}

// ListBook mocks base method.
func (m *MockPostgresRepository) ListBook(req entity.ListBookRequest) ([]entity.BookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBook", req)
	ret0, _ := ret[0].([]entity.BookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBook indicates an expected call of ListBook.
func (mr *MockPostgresRepositoryMockRecorder) ListBook(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBook", reflect.TypeOf((*MockPostgresRepository)(nil).ListBook), req)
}

// ListLatestBooks mocks base method.
func (m *MockPostgresRepository) ListLatestBooks() ([]entity.BookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLatestBooks")
	ret0, _ := ret[0].([]entity.BookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLatestBooks indicates an expected call of ListLatestBooks.
func (mr *MockPostgresRepositoryMockRecorder) ListLatestBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLatestBooks", reflect.TypeOf((*MockPostgresRepository)(nil).ListLatestBooks))
}

// ReturnBook mocks base method.
func (m *MockPostgresRepository) ReturnBook(historyID, BookID uint, returnedAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnBook", historyID, BookID, returnedAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnBook indicates an expected call of ReturnBook.
func (mr *MockPostgresRepositoryMockRecorder) ReturnBook(historyID, BookID, returnedAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnBook", reflect.TypeOf((*MockPostgresRepository)(nil).ReturnBook), historyID, BookID, returnedAt)
}

// UpdateBook mocks base method.
func (m *MockPostgresRepository) UpdateBook(book entity.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", book)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockPostgresRepositoryMockRecorder) UpdateBook(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockPostgresRepository)(nil).UpdateBook), book)
}

// UpdateUser mocks base method.
func (m *MockPostgresRepository) UpdateUser(user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockPostgresRepositoryMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockPostgresRepository)(nil).UpdateUser), user)
}

// MockRedisRepository is a mock of RedisRepository interface.
type MockRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepositoryMockRecorder
}

// MockRedisRepositoryMockRecorder is the mock recorder for MockRedisRepository.
type MockRedisRepositoryMockRecorder struct {
	mock *MockRedisRepository
}

// NewMockRedisRepository creates a new mock instance.
func NewMockRedisRepository(ctrl *gomock.Controller) *MockRedisRepository {
	mock := &MockRedisRepository{ctrl: ctrl}
	mock.recorder = &MockRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisRepository) EXPECT() *MockRedisRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRedisRepository) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRedisRepositoryMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRedisRepository)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockRedisRepository) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisRepositoryMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisRepository)(nil).Get), key)
}

// Set mocks base method.
func (m *MockRedisRepository) Set(key string, value interface{}, expiration uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisRepositoryMockRecorder) Set(key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisRepository)(nil).Set), key, value, expiration)
}

// MockBcryptService is a mock of BcryptService interface.
type MockBcryptService struct {
	ctrl     *gomock.Controller
	recorder *MockBcryptServiceMockRecorder
}

// MockBcryptServiceMockRecorder is the mock recorder for MockBcryptService.
type MockBcryptServiceMockRecorder struct {
	mock *MockBcryptService
}

// NewMockBcryptService creates a new mock instance.
func NewMockBcryptService(ctrl *gomock.Controller) *MockBcryptService {
	mock := &MockBcryptService{ctrl: ctrl}
	mock.recorder = &MockBcryptServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBcryptService) EXPECT() *MockBcryptServiceMockRecorder {
	return m.recorder
}

// Compare mocks base method.
func (m *MockBcryptService) Compare(password, hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", password, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compare indicates an expected call of Compare.
func (mr *MockBcryptServiceMockRecorder) Compare(password, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockBcryptService)(nil).Compare), password, hash)
}

// Hash mocks base method.
func (m *MockBcryptService) Hash(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockBcryptServiceMockRecorder) Hash(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockBcryptService)(nil).Hash), password)
}
