// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler.go

// Package mock is a generated GoMock package.
package mock

import (
	entity "go-library-service/cmd/api/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// BorrowBook mocks base method.
func (m *MockService) BorrowBook(req entity.BorrowBookRequest) (*entity.BorrowHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BorrowBook", req)
	ret0, _ := ret[0].(*entity.BorrowHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BorrowBook indicates an expected call of BorrowBook.
func (mr *MockServiceMockRecorder) BorrowBook(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BorrowBook", reflect.TypeOf((*MockService)(nil).BorrowBook), req)
}

// CreateBook mocks base method.
func (m *MockService) CreateBook(request entity.BookCreateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockServiceMockRecorder) CreateBook(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockService)(nil).CreateBook), request)
}

// CreateUser mocks base method.
func (m *MockService) CreateUser(user entity.UserCreateRequest) (*uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockService)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockService) DeleteUser(userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockServiceMockRecorder) DeleteUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockService)(nil).DeleteUser), userID)
}

// GetBookBorrowHistory mocks base method.
func (m *MockService) GetBookBorrowHistory(bookID uint) ([]entity.BorrowHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookBorrowHistory", bookID)
	ret0, _ := ret[0].([]entity.BorrowHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookBorrowHistory indicates an expected call of GetBookBorrowHistory.
func (mr *MockServiceMockRecorder) GetBookBorrowHistory(bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookBorrowHistory", reflect.TypeOf((*MockService)(nil).GetBookBorrowHistory), bookID)
}

// GetBookByID mocks base method.
func (m *MockService) GetBookByID(bookID uint) (*entity.BookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByID", bookID)
	ret0, _ := ret[0].(*entity.BookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID.
func (mr *MockServiceMockRecorder) GetBookByID(bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*MockService)(nil).GetBookByID), bookID)
}

// GetUserByID mocks base method.
func (m *MockService) GetUserByID(userID uint) (*entity.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(*entity.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockServiceMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockService)(nil).GetUserByID), userID)
}

// ListBook mocks base method.
func (m *MockService) ListBook(req entity.ListBookRequest) ([]entity.BookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBook", req)
	ret0, _ := ret[0].([]entity.BookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBook indicates an expected call of ListBook.
func (mr *MockServiceMockRecorder) ListBook(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBook", reflect.TypeOf((*MockService)(nil).ListBook), req)
}

// ListLatestBooks mocks base method.
func (m *MockService) ListLatestBooks() ([]entity.BookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLatestBooks")
	ret0, _ := ret[0].([]entity.BookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLatestBooks indicates an expected call of ListLatestBooks.
func (mr *MockServiceMockRecorder) ListLatestBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLatestBooks", reflect.TypeOf((*MockService)(nil).ListLatestBooks))
}

// LoginUser mocks base method.
func (m *MockService) LoginUser(username, password string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", username, password)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockServiceMockRecorder) LoginUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockService)(nil).LoginUser), username, password)
}

// ReturnBook mocks base method.
func (m *MockService) ReturnBook(req entity.ReturnBookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnBook", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnBook indicates an expected call of ReturnBook.
func (mr *MockServiceMockRecorder) ReturnBook(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnBook", reflect.TypeOf((*MockService)(nil).ReturnBook), req)
}

// UpdateBook mocks base method.
func (m *MockService) UpdateBook(req entity.BookUpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockServiceMockRecorder) UpdateBook(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockService)(nil).UpdateBook), req)
}

// UpdateUser mocks base method.
func (m *MockService) UpdateUser(user entity.UserUpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockServiceMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockService)(nil).UpdateUser), user)
}
